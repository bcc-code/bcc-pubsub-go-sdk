/*
BCC PubSub API

Event messaging and webhook service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// EventMessage struct for EventMessage
type EventMessage struct {
	SpecVersion NullableString `json:"specVersion,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Source NullableString `json:"source,omitempty"`
	Id NullableString `json:"id,omitempty"`
	Data NullableString `json:"data,omitempty"`
	Time NullableString `json:"time,omitempty"`
	Subject NullableString `json:"subject,omitempty"`
}

// NewEventMessage instantiates a new EventMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMessage() *EventMessage {
	this := EventMessage{}
	return &this
}

// NewEventMessageWithDefaults instantiates a new EventMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMessageWithDefaults() *EventMessage {
	this := EventMessage{}
	return &this
}

// GetSpecVersion returns the SpecVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventMessage) GetSpecVersion() string {
	if o == nil || o.SpecVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.SpecVersion.Get()
}

// GetSpecVersionOk returns a tuple with the SpecVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMessage) GetSpecVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SpecVersion.Get(), o.SpecVersion.IsSet()
}

// HasSpecVersion returns a boolean if a field has been set.
func (o *EventMessage) HasSpecVersion() bool {
	if o != nil && o.SpecVersion.IsSet() {
		return true
	}

	return false
}

// SetSpecVersion gets a reference to the given NullableString and assigns it to the SpecVersion field.
func (o *EventMessage) SetSpecVersion(v string) {
	o.SpecVersion.Set(&v)
}
// SetSpecVersionNil sets the value for SpecVersion to be an explicit nil
func (o *EventMessage) SetSpecVersionNil() {
	o.SpecVersion.Set(nil)
}

// UnsetSpecVersion ensures that no value is present for SpecVersion, not even an explicit nil
func (o *EventMessage) UnsetSpecVersion() {
	o.SpecVersion.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventMessage) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMessage) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *EventMessage) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *EventMessage) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *EventMessage) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *EventMessage) UnsetType() {
	o.Type.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventMessage) GetSource() string {
	if o == nil || o.Source.Get() == nil {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMessage) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *EventMessage) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *EventMessage) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *EventMessage) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *EventMessage) UnsetSource() {
	o.Source.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventMessage) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMessage) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *EventMessage) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *EventMessage) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *EventMessage) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *EventMessage) UnsetId() {
	o.Id.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventMessage) GetData() string {
	if o == nil || o.Data.Get() == nil {
		var ret string
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMessage) GetDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *EventMessage) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given NullableString and assigns it to the Data field.
func (o *EventMessage) SetData(v string) {
	o.Data.Set(&v)
}
// SetDataNil sets the value for Data to be an explicit nil
func (o *EventMessage) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *EventMessage) UnsetData() {
	o.Data.Unset()
}

// GetTime returns the Time field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventMessage) GetTime() string {
	if o == nil || o.Time.Get() == nil {
		var ret string
		return ret
	}
	return *o.Time.Get()
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMessage) GetTimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Time.Get(), o.Time.IsSet()
}

// HasTime returns a boolean if a field has been set.
func (o *EventMessage) HasTime() bool {
	if o != nil && o.Time.IsSet() {
		return true
	}

	return false
}

// SetTime gets a reference to the given NullableString and assigns it to the Time field.
func (o *EventMessage) SetTime(v string) {
	o.Time.Set(&v)
}
// SetTimeNil sets the value for Time to be an explicit nil
func (o *EventMessage) SetTimeNil() {
	o.Time.Set(nil)
}

// UnsetTime ensures that no value is present for Time, not even an explicit nil
func (o *EventMessage) UnsetTime() {
	o.Time.Unset()
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventMessage) GetSubject() string {
	if o == nil || o.Subject.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMessage) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *EventMessage) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *EventMessage) SetSubject(v string) {
	o.Subject.Set(&v)
}
// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *EventMessage) SetSubjectNil() {
	o.Subject.Set(nil)
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *EventMessage) UnsetSubject() {
	o.Subject.Unset()
}

func (o EventMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SpecVersion.IsSet() {
		toSerialize["specVersion"] = o.SpecVersion.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	if o.Time.IsSet() {
		toSerialize["time"] = o.Time.Get()
	}
	if o.Subject.IsSet() {
		toSerialize["subject"] = o.Subject.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEventMessage struct {
	value *EventMessage
	isSet bool
}

func (v NullableEventMessage) Get() *EventMessage {
	return v.value
}

func (v *NullableEventMessage) Set(val *EventMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMessage(val *EventMessage) *NullableEventMessage {
	return &NullableEventMessage{value: val, isSet: true}
}

func (v NullableEventMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


